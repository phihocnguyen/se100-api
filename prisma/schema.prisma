datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN
    CUSTOMER
    WHEMPLOYEE
    DEEMPLOYEE
}

enum Rating {
    ONE
    TWO
    THREE
    FOR
    FIVE
}

enum Status {
    PROCESSING
    SHIPPING
    COMPLETED
    CANCELED
}

model User {
    id            String         @id @default(cuid())
    email         String
    password      String
    role          UserRole
    emailVerified DateTime?
    image         String         @db.Text
    customer      Customer?
    employee      Employee?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    verifiedEmail VerifiedEmail?
}

model Customer {
    id          String     @id @default(cuid())
    fullName    String
    phoneNumber String
    userId      String     @unique
    user        User       @relation(fields: [userId], references: [id])
    invoices    Invoice[]
    feedbacks   Feedback[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model Employee {
    id        String   @id @default(cuid())
    fullName  String
    salary    Int
    beginDate DateTime
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    SKU              String            @unique
    productName      String
    purchasePrice    Int
    sellingPrice     Int
    image            String            @db.Text
    categoryId       String
    category         Category          @relation(fields: [categoryId], references: [id])
    invoiceDetails   InvoiceDetail[]
    inventories      Inventory[]
    DisplayedProduct DisplayedProduct?
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
}

model Category {
    id           String    @id @default(cuid())
    categoryName String
    products     Product[]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

model Invoice {
    id             String          @id @default(cuid())
    invoiceDate    DateTime
    totalPrice     Int
    status         Status          @default(PROCESSING)
    customerId     String
    customer       Customer        @relation(fields: [customerId], references: [id])
    invoiceDetails InvoiceDetail[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
}

model InvoiceDetail {
    id         String   @id @default(cuid())
    quantity   Int
    totalPrice Int
    invoiceId  String
    invoice    Invoice  @relation(fields: [invoiceId], references: [id])
    productSKU String
    product    Product  @relation(fields: [productSKU], references: [SKU])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Supplier {
    id               String        @id @default(cuid())
    supplierName     String
    address          String
    email            String
    phoneNumber      String
    contactPerson    String
    productsSupplied String[]
    SupplyOrders     SupplyOrder[]
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
}

model SupplyOrder {
    id              String   @id @default(cuid())
    orderDate       DateTime
    status          Status   @default(PROCESSING)
    items           String[]
    quantity        Int[]
    totalAmount     Int
    shippingAddress String
    supplierId      String
    supplier        Supplier @relation(fields: [supplierId], references: [id])
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Warehouse {
    id        String      @id @default(cuid())
    name      String
    location  String
    products  Inventory[]
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

model Inventory {
    id          String    @id @default(cuid())
    quantity    Int
    wareHouse   Warehouse @relation(fields: [wareHouseId], references: [id])
    wareHouseId String
    product     Product   @relation(fields: [productSKU], references: [SKU])
    productSKU  String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Feedback {
    id                 String           @id @default(cuid())
    content            String
    rating             Rating           @default(ONE)
    customerId         String
    customer           Customer         @relation(fields: [customerId], references: [id])
    displayedProductId String
    displayedProduct   DisplayedProduct @relation(fields: [displayedProductId], references: [id])
}

model VerifiedEmail {
    id        Int      @id @default(autoincrement())
    email     String
    token     String
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DisplayedProduct {
    id           String     @id @default(cuid())
    quantity     Int
    sellingPrice Int
    product      Product    @relation(fields: [productId], references: [SKU])
    productId    String     @unique
    feedbacks    Feedback[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}
