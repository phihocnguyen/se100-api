datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN
    CUSTOMER
    WHEMPLOYEE
    DEEMPLOYEE
}

enum Status {
    PROCESSING
    SHIPPING
    COMPLETED
    CANCELED
}

model User {
    id            String         @id @default(cuid())
    email         String
    password      String
    isOAuth       Boolean?
    role          UserRole
    emailVerified DateTime?
    image         String?        @db.Text
    customer      Customer?
    employee      Employee?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    verifiedEmail VerifiedEmail?
}

model Customer {
    id          String     @id @default(cuid())
    fullName    String
    phoneNumber String?
    gender      String?
    address     String?
    birthday    String?
    userId      String     @unique
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    invoices    Invoice[]
    feedbacks   Feedback[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model Employee {
    id          String   @id @default(cuid())
    fullName    String
    phoneNumber String
    beginDate   DateTime
    userId      String   @unique
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Product {
    SKU                String              @unique @default(cuid())
    productName        String
    purchasePrice      Int
    sellingPrice       Int
    image              String              @db.Text
    featuresImages     String[]
    categoryId         String
    category           Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    brand              String
    camera             Int?
    rom                Int?
    ram Int?
    hardDrive Int?
    cpu String?
    quantity           Int?
    description        String
    inventories        Inventory[]
    supplyOrdersDetail SupplyOrderDetail[]
    supplierId         String
    supplier           Supplier            @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    DisplayedProduct   DisplayedProduct?
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
}

model Category {
    id           String    @id @default(cuid())
    categoryName String
    products     Product[]
    Brand        Brand[]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

model Brand {
    id         String   @id @default(cuid())
    brandName  String
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Invoice {
    id             String          @id @default(cuid())
    invoiceDate    DateTime
    totalPrice     Int
    status         Status          @default(PROCESSING)
    address        String
    customerId     String
    paymentImg     String?
    customer       Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    invoiceDetails InvoiceDetail[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
}

model InvoiceDetail {
    id                 String           @id @default(cuid())
    quantity           Int
    totalPrice         Int
    invoiceId          String
    invoice            Invoice          @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    displayedProductId String
    displayedProduct   DisplayedProduct @relation(fields: [displayedProductId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
}

model Supplier {
    id            String        @id @default(cuid())
    supplierName  String
    address       String
    email         String
    phoneNumber   String
    contactPerson String
    products      Product[]
    SupplyOrders  SupplyOrder[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

model SupplyOrder {
    id                 String              @id @default(cuid())
    orderDate          DateTime
    status             Status              @default(PROCESSING)
    totalPrice         Int
    shippingAddress    String
    supplierId         String
    supplier           Supplier            @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    supplyOrdersDetail SupplyOrderDetail[]
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
}

model SupplyOrderDetail {
    id            String      @id @default(cuid())
    productSKU    String
    product       Product     @relation(fields: [productSKU], references: [SKU], onDelete: Cascade, onUpdate: Cascade)
    supplyOrder   SupplyOrder @relation(fields: [supplyOrderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    supplyOrderId String
    quantity      Int
    totalPrice    Int
}

model Warehouse {
    id        String      @id @default(cuid())
    name      String
    location  String
    products  Inventory[]
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

model Inventory {
    id          String    @id @default(cuid())
    quantity    Int
    wareHouse   Warehouse @relation(fields: [wareHouseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    wareHouseId String
    productSKU  String
    product     Product   @relation(fields: [productSKU], references: [SKU], onDelete: Cascade, onUpdate: Cascade)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Feedback {
    id                 String           @id @default(cuid())
    content            String
    rating             Int
    customerId         String
    customer           Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    displayedProductId String
    displayedProduct   DisplayedProduct @relation(fields: [displayedProductId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
}

model VerifiedEmail {
    id        Int      @id @default(autoincrement())
    email     String
    token     String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DisplayedProduct {
    id             String          @id @default(cuid())
    quantity       Int
    sellingPrice   Int
    product        Product         @relation(fields: [productId], references: [SKU], onDelete: Cascade, onUpdate: Cascade)
    productId      String          @unique
    feedbacks      Feedback[]
    invoiceDetails InvoiceDetail[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
}
